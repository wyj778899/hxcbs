<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chinaPress.exam.exam.dao.FcExamUserMapper">
	<resultMap id="BaseResultMap"
		type="chinaPress.exam.exam.model.FcExamUser">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="exam_id" jdbcType="INTEGER" property="examId" />
		<result column="signup_user_id" jdbcType="INTEGER"
			property="signupUserId" />
	</resultMap>
	<sql id="Base_Column_List">
		id, exam_id, signup_user_id
	</sql>
	<select id="selectByPrimaryKey"
		parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from fc_exam_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey"
		parameterType="java.lang.Integer">
		delete from fc_exam_user
		where id =
		#{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert"
		parameterType="chinaPress.exam.exam.model.FcExamUser">
		insert into fc_exam_user (id, exam_id, signup_user_id
		)
		values (#{id,jdbcType=INTEGER}, #{examId,jdbcType=INTEGER},
		#{signupUserId,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective"
		parameterType="chinaPress.exam.exam.model.FcExamUser">
		insert into fc_exam_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="examId != null">
				exam_id,
			</if>
			<if test="signupUserId != null">
				signup_user_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="examId != null">
				#{examId,jdbcType=INTEGER},
			</if>
			<if test="signupUserId != null">
				#{signupUserId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="chinaPress.exam.exam.model.FcExamUser">
		update fc_exam_user
		<set>
			<if test="examId != null">
				exam_id = #{examId,jdbcType=INTEGER},
			</if>
			<if test="signupUserId != null">
				signup_user_id = #{signupUserId,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey"
		parameterType="chinaPress.exam.exam.model.FcExamUser">
		update fc_exam_user
		set exam_id =
		#{examId,jdbcType=INTEGER},
		signup_user_id =
		#{signupUserId,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	
	<!-- 根据考试id查询考试关联的报名用户 -->
	<select id="selectByFcExamId" resultMap="BaseResultMap">
		select
			*
		from
			fc_exam_user
		where
			exam_id = #{examId}
	</select>
	
	<!-- 根据考试id删除考试关联的报名用户 -->
	<delete id="deleteByFcExamId">
		delete
		from
			fc_exam_user
		where
			exam_id = #{examId}
	</delete>
	
	<!-- 根据考试id查询该场考试下的用户 -->
	<select id="selectFcExamAreaUserCount" resultType="int">
		select
			count(*)
		from
			fc_exam_user a
			inner join fc_exam_signup_user b on a.signup_user_id = b.id
			inner join fc_exam_signup_area c on b.area_id = c.id
		where
			b.area_id = #{signupAreaId}
			<if test="name != null and name != ''">
				and b.user_name like concat('%', #{name}, '%')
			</if>
			<if test="phone != null and phone != ''">
				and b.tell_phone like concat('%', #{phone}, '%')
			</if>
			<if test="certificateNumber != null and certificateNumber != ''">
				and b.certificate_number like concat('%', #{certificateNumber}, '%')
			</if>
			<if test="status != null">
				<if test="status == 1">
				
				</if>
				<if test="status == 2">
				
				</if>
			</if>
	</select>
	
	<!-- 根据考试id查询该场考试下的用户 -->
	<select id="selectFcExamAreaUserList" resultType="chinaPress.exam.exam.vo.FcExamManageAreaUserListVo">
		select
			a.id, b.user_name name, b.education, b.tell_phone phone, b.certificate_number certificateNumber, 
			b.institution_name institutionName, b.post
<!-- 			,考试状态, 成绩, 发证时间, 证书编号, 考试地点, 补考次数 -->
		from
			fc_exam_user a
			inner join fc_exam_signup_user b on a.signup_user_id = b.id
			inner join fc_exam_signup_area c on b.area_id = c.id
		where
			b.area_id = #{signupAreaId}
			<if test="name != null and name != ''">
				and b.user_name like concat('%', #{name}, '%')
			</if>
			<if test="phone != null and phone != ''">
				and b.tell_phone like concat('%', #{phone}, '%')
			</if>
			<if test="certificateNumber != null and certificateNumber != ''">
				and b.certificate_number like concat('%', #{certificateNumber}, '%')
			</if>
			<if test="status != null">
				<if test="status == 1">
				
				</if>
				<if test="status == 2">
				
				</if>
			</if>
		limit
			#{offset}, #{rows}
	</select>
</mapper>